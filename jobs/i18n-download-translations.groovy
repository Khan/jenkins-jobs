// Pipeline job that downloads translations from crowdin.

@Library("kautils")
// Classes we use, under jenkins-jobs/src/.
import org.khanacademy.Setup;
// Vars we use, under jenkins-jobs/vars/.  This is just for documentation.
//import vars.exec
//import vars.notify
//import vars.withTimeout
//import vars.withSecrets


new Setup(steps

).addStringParam(
    "LOCALE",
    """Set this to the name of a locale to process, e.g., \"fr\". By default,
    the job will automatically select the locale most in need of an
    update.""",
    ""

).addStringParam(
    "ARCHIVEID",
    """The archive file to download. Currently unused, but putting in while
    we test triggering this build from crowdin-go.""",
    ""

).apply();


def runScript() {
   withTimeout('3h') {
      // We run in the i18n-update-strings workspace.  That way we
      // don't need our own copy of webapp.  This matters because
      // these jobs update intl/translations, which is huge.
      // TODO(csilvers): does this make sense anymore?

      // One complication is that Jenkins sometimes creates multiple workspaces
      // for the same job, and we depend on the all.pot.pickle generated by
      // the most recent successful run of i18n-update-strings. Therefore, we
      // need to figure out what the most recently used workspace is. The regex
      // below uses lookbehinds and lookaheads to extract what's inside the
      // <workspace> element and to also get rid of the last path component.
      def workspaceScript =
         "grep -oP " +
         "'(?<=<workspace>).*/workspace(@\\d+)?(?=/jenkins-jobs</workspace>)' " +
         "../../i18n-update-strings/builds/lastSuccessfulBuild/build.xml " +
         "| head -n1";
      def mostRecentWorkspace =
         sh(script: workspaceScript, returnStdout: true).trim();
      if (!mostRecentWorkspace) {
         mostRecentWorkspace = "../../i18n-update-strings/workspace";
      }

      dir(mostRecentWorkspace) {
         dir("webapp") {
            sh("make clean_pyc");
            sh("make python_deps");
         }

         // Remove output from a previous run.  Re-created by
         // update-translations.
         sh("rm -f updated_locales.txt")

         def overrideLang = params.LOCALE;

         if (!overrideLang) {
            withSecrets() {   // secrets are needed to talk to crowdin
               dir("webapp") {
                  // If not passed in as a param, get the single
                  // highest priority lang.
                  overrideLang = exec.outputOf([
                    "deploy/order_download_i18n.py",
                    "--verbose"]).split("\n")[0];
               }
            }
         }

         currentBuild.displayName = ("${currentBuild.displayName} " +
                                     "(${overrideLang})");

         // TODO(csilvers): see if we can break up this script into
         // pieces, so we can put using-a-lot-of-memory only around
         // the parts that use a lot of memory.
         lock("using-a-lot-of-memory") {
            withSecrets() {
               withEnv(["DOWNLOAD_TRANSLATIONS=1",
                        "NUM_LANGS_TO_DOWNLOAD=1",
                        "OVERRIDE_LANGS=${overrideLang}"]) {
                  sh("jenkins-jobs/update-translations.sh")
               }
            }
         }

         return readFile("updated_locales.txt").split("\n").join(" ");
      }
   }
}


onMaster('3h') {
   notify([slack: [channel: '#cp-eng',
                   sender: 'I18N Imp',
                   emoji: ':smiling_imp:', emojiOnFailure: ':imp:',
                   extraText: "@cp-support",
                   when: ['FAILURE', 'UNSTABLE']],
           email: [to: 'content-platform',
                   when: ['FAILURE', 'UNSTABLE']],
           aggregator: [initiative: 'content-platform',
                        when: ['SUCCESS', 'BACK TO NORMAL',
                               'FAILURE', 'ABORTED', 'UNSTABLE']]]) {
      def updatedLocales = '';

      // We modify files in this workspace -- which is not our own! -- so
      // we acquire a lock to make sure update-strings doesn't try to run
      // at the same time.
      lock("using-update-strings-workspace") {
         stage("Running script") {
            updatedLocales = runScript();
         }
      }

      currentBuild.displayName = "${currentBuild.displayName} (${updatedLocales})";

      // It's possible that no locale was updated. Only trigger the
      // upload job when there are changes.
      if (updatedLocales) {
         stage("Uploading to gcs") {
            build(job: 'i18n-gcs-upload',
                  parameters: [
                     string(name: 'LOCALES', value: updatedLocales),
                  ])
         }
      }
   }
}
